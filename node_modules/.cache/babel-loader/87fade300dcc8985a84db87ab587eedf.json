{"ast":null,"code":"import _classCallCheck from\"/Users/colinlin/learnReact/my_app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/colinlin/learnReact/my_app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/colinlin/learnReact/my_app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/colinlin/learnReact/my_app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/colinlin/learnReact/my_app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';export var TodoItem=/*#__PURE__*/function(_Component){_inherits(TodoItem,_Component);function TodoItem(){var _getPrototypeOf2;var _this;_classCallCheck(this,TodoItem);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(TodoItem)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.getStyle=function(){return{background:'#f4f4f4f4',padding:'10px',borderBottom:'1px #ccc dotted',// expression ? is the same as if(expression)\n// : means else\ntextDecoration:_this.props.todo.completed?'line-through':'none'};};_this.markComplete=function(){};return _this;}_createClass(TodoItem,[{key:\"render\",value:function render(){// pulls out id and title from this.props.todo\nvar _this$props$todo=this.props.todo,id=_this$props$todo.id,title=_this$props$todo.title;// inorder to modify state we have to go back to the higher level components\n// one by one using props\nreturn React.createElement(\"div\",{style:this.getStyle()},React.createElement(\"p\",null,React.createElement(\"input\",{type:\"checkbox\",onChange:this.props.markComplete.bind(this,id)}),\" \",' ',title,React.createElement(\"button\",{onClick:this.props.delTodo.bind(this,id),style:btnStyle},\"X\")));}}]);return TodoItem;}(Component);// require the todo object (good practice but not mandatory)\nvar btnStyle={background:\"red\",color:\"white\",border:\"none\",padding:\"5px 9px\",borderRadius:\"50%\",cursor:\"pointer\",float:\"right\"};export default TodoItem;","map":{"version":3,"sources":["/Users/colinlin/learnReact/my_app/src/components/TodoItem.js"],"names":["React","Component","TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","markComplete","id","title","bind","delTodo","btnStyle","color","border","borderRadius","cursor","float"],"mappings":"klBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAGA,UAAaC,CAAAA,QAAb,uYAEIC,QAFJ,CAEe,UAAK,CACZ,MAAM,CACFC,UAAU,CAAE,WADV,CAEFC,OAAO,CAAE,MAFP,CAGFC,YAAY,CAAE,iBAHZ,CAIF;AACA;AACAC,cAAc,CAAE,MAAKC,KAAL,CAAWC,IAAX,CAAgBC,SAAhB,CAChB,cADgB,CACC,MAPf,CAAN,CASH,CAZL,OAcIC,YAdJ,CAcmB,UAAK,CAEnB,CAhBL,2EAiBa,CACL;AADK,qBAEiB,KAAKH,KAAL,CAAWC,IAF5B,CAEGG,EAFH,kBAEGA,EAFH,CAEOC,KAFP,kBAEOA,KAFP,CAGL;AACA;AACA,MACI,4BAAK,KAAK,CAAG,KAAKV,QAAL,EAAb,EACG,6BACI,6BAAO,IAAI,CAAC,UAAZ,CACA,QAAQ,CAAE,KAAKK,KAAL,CAAWG,YAAX,CAAwBG,IAAxB,CAA6B,IAA7B,CAAkCF,EAAlC,CADV,EADJ,KAEwD,GAFxD,CAGMC,KAHN,CAII,8BAAQ,OAAO,CAAE,KAAKL,KAAL,CAAWO,OAAX,CAAmBD,IAAnB,CAAwB,IAAxB,CAA6BF,EAA7B,CAAjB,CACA,KAAK,CAAGI,QADR,MAJJ,CADH,CADJ,CAWH,CAjCL,sBAA8Bf,SAA9B,EAmCA;AAKA,GAAMe,CAAAA,QAAQ,CAAE,CACZZ,UAAU,CAAE,KADA,CAEZa,KAAK,CAAE,OAFK,CAGZC,MAAM,CAAE,MAHI,CAIZb,OAAO,CAAE,SAJG,CAKZc,YAAY,CAAC,KALD,CAMZC,MAAM,CAAC,SANK,CAOZC,KAAK,CAAC,OAPM,CAAhB,CAUA,cAAenB,CAAAA,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class TodoItem extends Component {\n\n    getStyle = () =>{\n        return{\n            background: '#f4f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            // expression ? is the same as if(expression)\n            // : means else\n            textDecoration: this.props.todo.completed ? \n            'line-through' : 'none'\n        }\n    }\n\n    markComplete = () =>{\n\n    }\n    render() {\n        // pulls out id and title from this.props.todo\n        const { id, title } = this.props.todo;\n        // inorder to modify state we have to go back to the higher level components\n        // one by one using props\n        return (\n            <div style ={this.getStyle()}>\n               <p>\n                   <input type='checkbox' \n                   onChange={this.props.markComplete.bind(this,id)}/> {' '}\n                   { title }\n                   <button onClick={this.props.delTodo.bind(this,id)}\n                   style ={btnStyle}>X</button>\n                </p>\n            </div>\n        )\n    }\n}\n// require the todo object (good practice but not mandatory)\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nconst btnStyle ={\n    background: \"red\",\n    color: \"white\",\n    border: \"none\",\n    padding: \"5px 9px\",\n    borderRadius:\"50%\",\n    cursor:\"pointer\",\n    float:\"right\"\n}\n\nexport default TodoItem\n"]},"metadata":{},"sourceType":"module"}